{"version":3,"file":"539.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA6B;AACL;AACY;AACJ;AAEzB,MAAM,YAAY,CAAC,WAAuD;AAC/E,QAAM,cAAc,8BAAY,CAAC,6BAAe;AAEhD,QAAM,CAAC,aAAa,cAAc,IAAI,+BAAQ,CAE5C,MAAS;AAEX,kCAAS,CAAC,MAAM;AACd,sBAAkB;AAAA,EACpB,GAAG,CAAC,YAAY,SAAS,YAAY,MAAM,OAAO,CAAC;AAEnD,QAAM,oBAAoB,MAAM;AAC9B,iBAAa,MAAM;AAEnB,QAAI,YAAY,SAAS,CAAC,YAAY,MAAM;AAAW;AAEvD,UAAM,eAAe,QAAQ;AAAA,MAC3B,YAAY,MAAM,UAAU,IAAI,CAAC,QAAQ;AACvC,eAAO;AAAA,UACL,OAAO,IAAI,wBAAY,CAAC,IAAI,MAAM,GAAG,IAAI,MAAM,IAAI,GAAG;AAAA,UACtD,SAAS;AAAA,YACP,WAAW;AAAA,YACX,aAAa;AAAA,YACb,SAAS;AAAA,cACP,OAAO;AAAA,cACP,UAAU;AAAA,YACZ;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,mBAAe,YAAY;AAAA,EAC7B;AAEA,SAAO;AAAA,IACL;AAAA,EACF;AACF;;;;ACmBS;AA9DgB;AACE;AACH;AACoB;AAElB;AAC+C;AAgBlE,MAAM,SAAS,CAAC,EAAE,gBAAgB,KAAK,MAAmB;AAC/D,QAAM,EAAE,QAAQ,IAAI,2BAAQ,CAAC;AAC7B,QAAM,oBAAoB,4BAAU,CAAC,gCAAkB;AACvD,QAAM,qBAAqB,4BAAU,CAAC,iCAAmB;AACzD,QAAM,UAAU,4BAAU,CAAC,6BAAe;AAE1C,QAAM,CAAC,QAAQ,SAAS,IAAI,+BAAQ,CAA6C,IAAI;AACrF,QAAM,QAAQ,6BAAM,CAAiB,IAAI;AAEzC,WAAS,CAAC,MAAM;AAEhB,kCAAS,CAAC,MAAM;AACd,uBAAmB,cAAc;AACjC,YAAQ,IAAI;AAEZ,QAAI,MAAM,SAAS;AACjB,wBAAkB,cAAc;AAChC,YAAM,eAAe,yBAAa,CAAC,OAAO,MAAM,SAAS;AAAA,QACvD,aAAa;AAAA,QACb,UAAU;AAAA,QACV,OAAO,QAAQ,SAAS,SAAS,YAAY;AAAA,QAC7C,OAAO;AAAA,QACP,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,gBAAgB;AAAA,MAClB,CAAC;AAED,mBAAa,SAAS,GAAG,mBAAmB,MAAM;AAChD,cAAM,UAAU,aAAa,SAAS;AACtC,0BAAkB,OAAO;AAAA,MAC3B,CAAC;AAED,gBAAU,YAAY;AAAA,IACxB;AAEA,WAAO,MAAM;AACX,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,SAAO,oCAAC,SAAI,WAAU,UAAS,KAAK,OAAO,OAAO,EAAE,WAAW,IAAI,GAAG;AACxE","sources":["webpack://Leafwriter/./src/dialogs/editSource/hooks/useEditor.ts","webpack://Leafwriter/./src/dialogs/editSource/editor.tsx"],"sourcesContent":["import { useAtomValue } from 'jotai';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport { useEffect, useState } from 'react';\nimport { xmlValidityAtom } from '../store';\n\nexport const useEditor = (editor: monaco.editor.IStandaloneCodeEditor | null) => {\n  const xmlValidity = useAtomValue(xmlValidityAtom);\n\n  const [decorations, setDecorations] = useState<\n    monaco.editor.IEditorDecorationsCollection | undefined\n  >(undefined);\n\n  useEffect(() => {\n    updateDecorations();\n  }, [xmlValidity.valid || xmlValidity.error.message]);\n\n  const updateDecorations = () => {\n    decorations?.clear();\n\n    if (xmlValidity.valid || !xmlValidity.error.positions) return;\n\n    const _decorations = editor?.createDecorationsCollection(\n      xmlValidity.error.positions.map((pos) => {\n        return {\n          range: new monaco.Range(pos.line, 0, pos.line, pos.col),\n          options: {\n            className: 'monaco-editor-error-line',\n            isWholeLine: true,\n            minimap: {\n              color: 'rgba(255, 0, 0, 0.2)',\n              position: 1,\n            },\n          },\n        };\n      }),\n    );\n\n    setDecorations(_decorations);\n  };\n\n  return {\n    updateDecorations,\n  };\n};\n","import { useTheme } from '@mui/material';\nimport { useSetAtom } from 'jotai';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport { useEffect, useRef, useState } from 'react';\nimport type { EditSourceDialogProps } from '../type';\nimport { useEditor } from './hooks/useEditor';\nimport { contentTypeAtom, currentContentAtom, originalContentAtom } from './store';\n\n// * Intellisense for XML: https://mono.software/2017/04/11/custom-intellisense-with-monaco-editor/\n\n// @ts-ignore\n// self.MonacoEnvironment = {\n//   getWorkerUrl: function (_moduleId: any, label: string) {\n//     return './editor.worker.bundle.js';\n//   },\n// };\n\ninterface EditorProps {\n  initialContent: string;\n  type: EditSourceDialogProps['type'];\n}\n\nexport const Editor = ({ initialContent, type }: EditorProps) => {\n  const { palette } = useTheme();\n  const setCurrentContent = useSetAtom(currentContentAtom);\n  const setOriginalContent = useSetAtom(originalContentAtom);\n  const setType = useSetAtom(contentTypeAtom);\n\n  const [editor, setEditor] = useState<monaco.editor.IStandaloneCodeEditor | null>(null);\n  const divEl = useRef<HTMLDivElement>(null);\n\n  useEditor(editor);\n\n  useEffect(() => {\n    setOriginalContent(initialContent);\n    setType(type);\n\n    if (divEl.current) {\n      setCurrentContent(initialContent);\n      const monacoEditor = monaco.editor.create(divEl.current, {\n        lineNumbers: 'on',\n        language: 'xml',\n        theme: palette.mode === 'dark' ? 'vs-dark' : 'vs-light',\n        value: initialContent,\n        wordWrap: 'wordWrapColumn',\n        wordWrapColumn: 100,\n        wrappingIndent: 'indent',\n      });\n\n      monacoEditor.getModel()?.onDidChangeContent(() => {\n        const content = monacoEditor.getValue();\n        setCurrentContent(content);\n      });\n\n      setEditor(monacoEditor);\n    }\n\n    return () => {\n      editor?.dispose();\n    };\n  }, []);\n\n  return <div className=\"Editor\" ref={divEl} style={{ minHeight: 600 }} />;\n};\n"],"names":[],"sourceRoot":""}